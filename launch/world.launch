<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="false"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 
  <arg name="map_file" value="../catkin_ws/src/comp_cov_sim/custom_maps/map.yaml"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>
  
  <group ns="robot_0_ns">
	<param name="tf_prefix" value="robot_0"/>
 	  <include file="$(find comp_cov_sim)/launch/includes/kobuki.launch.xml">
	    	<arg name="base" value="$(arg base)"/>
   		<arg name="stacks" value="$(arg stacks)"/>
		<arg name="3d_sensor" value="$(arg 3d_sensor)"/>
		<arg name="initial_pose" value="-x 0 -y 0"/>
    		<arg name="robot_name" value="robot_0"/>
 	 </include>

	<!-- map node -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>
	
	<node name="tf" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /map /robot_0/odom 100"/>
	
	<!-- Launch coverage node -->
    	<node name="coverage_node" pkg="comp_cov_sim" type="coverage_node.py" output="screen">
		<param name="robot_size" value="0.35"/>
		<param name="robot_name" value="robot_0"/>
	</node>
  </group>
 

  <group ns="robot_1_ns">
	<param name="tf_prefix" value="robot_1"/>
 	  <include file="$(find comp_cov_sim)/launch/includes/kobuki.launch.xml">
	    	<arg name="base" value="$(arg base)"/>
   		<arg name="stacks" value="$(arg stacks)"/>
		<arg name="3d_sensor" value="$(arg 3d_sensor)"/>
		<arg name="initial_pose" value="-x 2 -y 2"/>
    		<arg name="robot_name" value="robot_1"/>
 	 </include>

	<!-- Launch navigation stack with amcl -->
	<!--include file="$(find comp_cov_sim)/launch/amcl_demo.launch">
		<arg name="map_file" value="$(arg map_file)"/>
		<arg name="robot_name" value="robot_1"/>
	</include-->

	<!-- map node -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>
	
	<node name="tf" pkg="tf" type="static_transform_publisher" args="2 2 0 0 0 0 /map robot_1/odom 100" />

	<!-- Launch coverage node -->
	<node name="coverage_node" pkg="comp_cov_sim" type="coverage_node.py" output="screen">
		<param name="robot_size" value="0.35"/>
		<param name="robot_name" value="robot_1"/>
	</node>
  </group>
 
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
</launch>
